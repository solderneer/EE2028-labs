/*
 * uart.c
 *
 *  Created on: Nov 15, 2018
 *      Author: solderneer
 */
// Contains all the utility function for uart
#include "uart.h"
#include "lpc17xx_uart.c"
#include "lpc17xx_pinsel.h"

#define BUFFER_SIZE 256
#define __BUF_MASK (BUFFER_SIZE-1)
#define __BUF_IS_FULL(head, tail) ((tail&__BUF_MASK)==((head+1)&__BUF_MASK))
#define __BUF_WILL_FULL(head, tail) ((tail&__BUF_MASK)==((head+2)&__BUF_MASK))
#define __BUF_IS_EMPTY(head, tail) ((head&__BUF_MASK)==(tail&__BUF_MASK))
#define __BUF_RESET(bufidx)	(bufidx=0)
#define __BUF_INCR(bufidx)	(bufidx=(bufidx+1)&__BUF_MASK)

// Private types
typedef struct {
	__IO uint32_t head;
	__IO uint32_t tail;
	__IO uint8_t buffer[BUFFER_SIZE];
} UART_BUFFER;

// Private variables
UART_BUFFER buffer;
__IO FlagStatus TxInterrupt;

// Private function prototypes
void UART_IntTransmit(void);

// Interrupt Handler
void UART_IntTransmit(void) {
	UART_IntConfig(LPC_UART3, UART_INTCFG_THRE, DISABLE);
	while(UART_CheckBusy(LPC_UART3) == SET);
	while (!__BUF_IS_EMPTY(rb.tx_head,rb.tx_tail)) {
	        /* Move a piece of data into the transmit FIFO */
	    	if (UART_Send((LPC_UART_TypeDef *)LPC_UART0, (uint8_t *)&rb.tx[rb.tx_tail], 1, NONE_BLOCKING)){
	        /* Update transmit ring FIFO tail pointer */
	        __BUF_INCR(rb.tx_tail);
	    	} else {
	    		break;
	    	}
	}

	    /* If there is no more data to send, disable the transmit
	       interrupt - else enable it or keep it enabled */
		if (__BUF_IS_EMPTY(rb.tx_head, rb.tx_tail)) {
	    	UART_IntConfig((LPC_UART_TypeDef *)LPC_UART0, UART_INTCFG_THRE, DISABLE);
	    	// Reset Tx Interrupt state
	    	TxIntStat = RESET;
	    }
	    else{
	      	// Set Tx Interrupt state
			TxIntStat = SET;
	    	UART_IntConfig((LPC_UART_TypeDef *)LPC_UART0, UART_INTCFG_THRE, ENABLE);
	    }

}
void init_uart(void) {
	UART_CFG_Type UARTConfigStruct;
	PINSEL_CFG_Type PinCfg;

	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 1;
	PINSEL_ConfigPin(&PinCfg);

	UART_ConfigStructInit(&UARTConfigStruct);
	UART_Init(LPC_UART3, &UARTConfigStruct);
	UART_TxCmd(LPC_UART3, ENABLE);
}
